{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","App.jsx","index.js"],"names":["Section","title","children","protoType","PropTypes","string","isRequired","node","FeedbackOptions","onLeaveFeedback","options","map","option","type","name","onClick","charAt","toUpperCase","slice","func","arrayOf","Statistics","good","neutral","bad","total","positivePercentage","number","Notification","message","App","state","incrementFeedback","event","setState","prevState","target","this","Math","floor","countTotalFeedback","className","Object","keys","countPositiveFeedbackPercentage","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAEMA,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,6BAAKD,IACJC,MAKPF,EAAQG,UAAY,CAClBF,MAAOG,IAAUC,OAAOC,WACxBJ,SAAUE,IAAUG,MAGPP,QCbTQ,G,MAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,gBAAiBC,EAAc,EAAdA,QAC1C,OACE,mCACGA,EAAQC,KAAI,SAAAC,GACX,OACE,wBACEC,KAAK,SAELC,KAAMF,EACNG,QAASN,EAJX,SAMGG,EAAOI,OAAO,GAAGC,cAAgBL,EAAOM,MAAM,IAJ1CN,UAYjBJ,EAAgBL,UAAY,CAC1BM,gBAAiBL,IAAUe,KAAKb,WAChCI,QAASN,IAAUgB,QAAQhB,IAAUC,OAAOC,aAG/BE,QCzBTa,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WAKNL,EAAWlB,UAAY,CACrBmB,KAAMlB,IAAUuB,OAAOrB,WACvBiB,QAASnB,IAAUuB,OAAOrB,WAC1BkB,IAAKpB,IAAUuB,OAAOrB,WACtBmB,MAAOrB,IAAUuB,OAAOrB,WACxBoB,mBAAoBtB,IAAUuB,OAAOrB,YAGxBe,QCpBTO,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,mCACE,4BAAIA,OAKVD,EAAazB,UAAY,CACvB0B,QAASzB,IAAUC,OAAOC,YAGbsB,QCwCAE,E,4MA9CbC,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPQ,kBAAoB,SAAAC,GAClB,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAMG,OAAOtB,KAAOqB,EAAUF,EAAMG,OAAOtB,MAAQ,O,wDAIxD,WACE,OAAOuB,KAAKN,MAAMT,KAAOe,KAAKN,MAAMR,QAAUc,KAAKN,MAAMP,M,6CAE3D,WACE,OAAOc,KAAKC,MAAOF,KAAKN,MAAMT,KAAOe,KAAKG,qBAAwB,O,oBAEpE,WACE,MAA+BH,KAAKN,MAA5BT,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,sBAAKiB,UAAU,MAAf,UACE,cAAC,EAAD,CAASxC,MAAM,wBAAf,SACE,cAAC,EAAD,CACES,QAASgC,OAAOC,KAAKN,KAAKN,OAC1BtB,gBAAiB4B,KAAKL,sBAG1B,cAAC,EAAD,CAAS/B,MAAM,aAAf,SACGoC,KAAKG,qBAAuB,EAC3B,cAAC,EAAD,CACElB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOY,KAAKG,qBACZd,mBAAoBW,KAAKO,oCAG3B,cAAC,EAAD,CAAcf,QAAQ,+B,GAvChBgB,IAAMC,WCFxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2cf5278d.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <>\n      <h2>{title}</h2>\n      {children}\n    </>\n  );\n};\n\nSection.protoType = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import './FeedbackOptions.scss';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ onLeaveFeedback, options }) => {\n  return (\n    <>\n      {options.map(option => {\n        return (\n          <button\n            type=\"button\"\n            key={option}\n            name={option}\n            onClick={onLeaveFeedback}\n          >\n            {option.charAt(0).toUpperCase() + option.slice(1)}\n          </button>\n        );\n      })}\n    </>\n  );\n};\n\nFeedbackOptions.protoType = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}%</p>\n    </>\n  );\n};\n\nStatistics.protoType = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return (\n    <>\n      <p>{message}</p>\n    </>\n  );\n};\n\nNotification.protoType = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React from 'react';\nimport './App.scss';\nimport Section from './components/Section/Section';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Notification from './components/Notification/Notification';\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  incrementFeedback = event => {\n    this.setState(prevState => ({\n      [event.target.name]: prevState[event.target.name] + 1,\n    }));\n  };\n\n  countTotalFeedback() {\n    return this.state.good + this.state.neutral + this.state.bad;\n  }\n  countPositiveFeedbackPercentage() {\n    return Math.floor((this.state.good / this.countTotalFeedback()) * 100);\n  }\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <div className=\"App\">\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.incrementFeedback}\n          ></FeedbackOptions>\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            ></Statistics>\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}